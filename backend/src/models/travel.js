const mongoose = require('mongoose')
const Schema = mongoose.Schema
const travelStatuses = require('./types/enumTravelStatuses.js')
const travelStatusesValues = Object.values(travelStatuses)
const errorHandler = require('./handlers/errorHandler')
const statusHandler = require('./handlers/statusHandler')
const populateHandler = require('./handlers/populateHandler')
const createError = require('http-errors')
const CardModel = require('./card')

const travelSchema = new Schema({
   title: {
      type: String,
      required: true,
      description: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
   },
   beginDate: {
      type: Date,
      description: '–ù–∞—á–∞–ª–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
   },
   endDate: {
      type: Date,
      description: '–ö–æ–Ω–µ—Ü –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
   },
   status: {
      type: String,
      default: travelStatuses.ACTIVE,
      enum: travelStatusesValues,
      description: '–°—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏',
   },
   users: [
      {
         type: mongoose.ObjectId,
         description: 'ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
         default: [],
         ref: 'User',
      },
   ],
   cards: [
      {
         type: mongoose.ObjectId,
         description: '–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–µ–∑–¥–∫–∏',
         default: [],
         ref: 'Card',
      },
   ],
})

travelSchema.post('findOne', errorHandler.ErrorTravelHandler)
travelSchema.post('findOne', statusHandler)
travelSchema.post('findOne', populateHandler.travelToClient)
travelSchema.pre('findOneAndUpdate', async function (next) {
   const updateBeginDate = new Date(this._update.beginDate)
   const updateEndDate = new Date(this._update.endDate)
   if (updateBeginDate > updateEndDate) {
      next(
         createError(
            400,
            '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚Äì –∂–∞–ª—å, –Ω–æ –º–∞—à–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏ –º—ã –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ ü§ñ'
         )
      )
   } else {
      for (const cardModel of this._update.cards) {
         const card = await CardModel.findById(cardModel._id)
         if (
            (card.beginDate && new Date(card.beginDate) < updateBeginDate) ||
            (card.endDate && new Date(card.endDate) > updateEndDate)
         ) {
            next(
               createError(
                  400,
                  '–î–∞—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å üò•'
               )
            )
         }
      }
   }
   next()
})
travelSchema.post('findOneAndUpdate', errorHandler.ErrorTravelHandler)
travelSchema.post('findOneAndUpdate', statusHandler)
travelSchema.post('findOneAndUpdate', populateHandler.travelToClient)
travelSchema.post('save', statusHandler)
travelSchema.post('save', errorHandler.ErrorTravelHandler)
travelSchema.post('save', populateHandler.travelToClient)

module.exports = mongoose.model('Travel', travelSchema)
